===============================================
# create vitual environment in the terminal
py -3 -m venv venv
===============================================
# in CMD console to confirm the vital environment 
venv\Scripts\activate.bat
===============================================
# Install dependencies w/ pip
pip install fastapi[all]
===============================================
# Show the package installed
pip freeze
===============================================
# import fastapi
from fastapi import FastAPI
===============================================
# run FastAPI automatically
uvicorn main:app --reload
===============================================
===============================================
# create app folder <package>
# create __init__.py in app folder
# move main.py to app folder
uvicorn app.main:app --reload
===============================================
===========================================================
DataBase: Postgres; model: SQLALCHEMY; schema: Pydantic 
===========================================================

# connecting to Postgres
pip install psycopg2
import psycopg2

# Connect to an existing database
>>> conn = psycopg2.connect("dbname=test user=postgres")

# Open a cursor to perform database operations
>>> cur = conn.cursor()

# Execute a command: this creates a new table
>>> cur.execute("CREATE TABLE test (id serial PRIMARY KEY, num integer, data varchar);")

# Pass data to fill a query placeholders and let Psycopg perform
# the correct conversion (no more SQL injections!)
>>> cur.execute("INSERT INTO test (num, data) VALUES (%s, %s)",
...      (100, "abc'def"))

# Query the database and obtain data as Python objects
>>> cur.execute("SELECT * FROM test;")
>>> cur.fetchone()
(1, 100, "abc'def")

# Make the changes to the database persistent
>>> conn.commit()

# Close communication with the database
>>> cur.close()
>>> conn.close()
===============================================
model: SQLALCHEMY; schema: Pydantic 
===============================================

# SQLALCHEMY
pip install sqlalchemy
setup database.py in app folder

from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
SQLALCHEMY_DATABASE_URL = 'postgresql://<username>:<password>@<ip-address/hostname:port>/<database_name>'

engine = create_engine(SQLALCHEMY_DATABASE_URL)
Base = declarative_base()
SessionLocal = sessionmaker(autocommit=False, 
autoflush=False, bind=engine)

def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

===============================================
TABLE
===============================================
# create table
setup models.py in the app folder

from sqlalchemy import Column
from .database import Base

setup class Post(Base) in models.py [Schema]

# To main.py
from . import models
from .database import engine  

models.Base.metadata.create_all(bind=engine)
===============================================
===============================================
# Schema Validation with Pydantic
from pydantic import BaseModel
from typing import Optional
===============================================

# setup routers folder in app folder
# setup router in routers folder

===============================================
# Hashing
===============================================
# User Model, Schema
from pydantic import EmailStr
===============================================
# Hah password
pip install passlib[bcrypt]
setup utils.py in app folder
from passlib.context import CryptContext
pwd_context = CryptContext(schem=s=["bcrypt"], deprecated="auto")
user.password = pwd_context.hash(user.password)
===============================================
from passlib.context import CryptContext

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

def hash(password: str):
    return pwd_context.hash(password)

def verify(plain_password, hashed_password):
    return pwd_context.verify(plain_password, hashed_password)

===============================================
# Creating Token
===============================================
pip install python-jose[cryptography]

create oauth2.py in app folder
from jose import jwt, JWTError
from datetime import datetime, timedelta
from . import schemas
from fastapi import Depends, status, HTTPException
from fastapi.security import OAuth2PasswordBearer

oauth2_scheme = Oauth2PasswordBearer(tokenUrl='login')

#SECRET_KEY
#Algorithm
#Expriation time

setup def create_access_token(data: dict)
setup def verify_access_token(token: str, credentials_exception)

in auth.py
import oauth2 
from fastapi.security.oauth2 import OAU2PasswordBearer

in schemas.py
from typing import Optional

class Token(BaseModel):
    access_token: str
    token_type: str

class TokenData(BaseModel):
    id: Optional[str] = None

===============================================
# Post with authentication
===============================================
in post.py
from .. import oauth2

===============================================
# Environment setting

Test setting
pm.environment.set("JWT", pm.response.json().access_token);
===============================================
===============================================
# Linking User and Post

# in oauth2.py

def get_current_user(token: str = Depends(oauth2_scheme), db: Session=Depends(database.get_db)):
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail=f"Could not validate credentials",
        headers={"WWW-Authenticate": "Bearer"}
    )

    token = verify_access_token(token, credentials_exception)

    user = db.query(models.User).filter(models.User.id == token.id).first()

    return user

# in posts.py
@router.post("/", status_code = status.HTTP_201_CREATED, response_model=schemas.Post)
def create_posts(
    post: schemas.PostCreate, 
    db: Session=Depends(database.get_db), 
    current_user: int = Depends(oauth2.get_current_user)
):
    # new_post = models.Post(title=post.title, content=post.content, published=post.published)
    
    new_post = models.Post(owner_id=current_user.id, **post.dict())
    db.add(new_post)
    db.commit()
    db.refresh(new_post)
    return new_post

# in models.py

owner = relationship('User')

# in schemas.py
class Post(PostBase):
    id: int
    created_at: datetime
    owner_id: int
    owner: UserOut

    class Config:
        orm_mode = True
===============================================
Query Parameters
===============================================
#Env Variables

create config.py in app folder
from pydantic import BaseSettings

create .env file
create .gitignore file

in database.py
from .config import settings
SQLALCHEMY_DATABASE_URL = f'postgresql://{settings.database_username}:{settings.database_password}@{settings.
database_hostname}:{settings.database_port}/{settings.database_name}'

in oauth2.py
from .config import settings

SECRET_KEY = settings.secret_key
ALGORITHM = settings.algorithm
ACCESS_TOKEN_EXPIRE_MINUTES = settings.access_token_expire_minutes

conn = psycopg2.connect(
    host=settings.database_hostname,
    port=settings.database_port,
    database=settings.database_name, 
    user=settings.database_username, 
    password=settings.database_password,
    cursor_factory=RealDictCursor,
)

===============================================
# in models.py
class vote(Base):
    __tablename__ = "votes"

    user_id = Column(Integer, ForeignKey("users.id", ondelete="CASCADE"), primary_key=True)
    post_id = Column(Integer, ForeignKey("posts.id", ondelete="CASCADE"), primary_key=True)

# in schemas.py
from pydantic.types import conint
class Vote(BaseModel):
    post_id: int
    dir: conint(le=1)


# vote.py
router = APIRouter(
    prefix="/vote",
    tags=["Vote"]
)

@router.post("/", status_code=status.HTTP_201_CREATED)
def vote(vote: schemas.Vote, 
    db: Session=Depends(database.get_db), 
    current_user: int =Depends(oauth2.get_current_user)
    ):

===============================================
Joins in SqlAlchemy
===============================================
# in post.py
from sqlalchemy import func

posts = db.query(models.Post, func.count(models.Vote.post_id).label("votes")).join(
    models.Vote, 
    models.Post.id == models.Vote.post_id, 
    isouter=True).group_by(
        models.Post.id).filter(
        models.Post.owner_id == current_user.id, models.Post.title.contains(search)
        ).limit(limit).offset(skip).all()

in schemas.py
class PostOut(BaseModel):
    Post: Post
    votes: int

===============================================
database migration tool - alembic

pip install alembic

alembic init alembic => creat alembic folder & alembic.ini

# go to  alembic folder in env.py
from app.models import Base
from app.config import settings

config.set_main_option("sqlalchemy.url", f'postgresql+psycopg2://{settings.database_username}:{settings.database_password}@{settings.database_hostname}:
{settings.database_port}/{settings.database_name}')

target_metadata = Base.metadata

# in alembic.ini

# sqlalchemy.url = 

alembic revision -m "create posts table"
Generating e:\CS54\Python_FastAPI_All\Python_FastAPI\alembic\versions\7506d4c94b6c_create_posts_table.c94b6c_create_posts_table.py ...  done


in 7506d4c94b6c_create_posts_table.c94b6c_create_posts_table.py

def upgrade() -> None:
    op.create_table(
        'posts', 
        sa.Column('id', sa.Integer(), nullable=False, primary_key=True),
        sa.Column('title', sa.String(), nullable=False),
    )
    
def downgrade() -> None:
    op.drop_table('posts')

alembic upgrade 7506d4c94b6c
===============================================

alembic revision -m "add content column to the posts table"


FastAPI_All\Python_FastAPI\alembic\versions\cfbd170bf84f_add_content_column_to_the_posts_table.py ...  done

in cfbd170bf84f_add_content_column_to_the_posts_table.py


def upgrade() -> None:
    op.add_column(
        "posts",
        sa.Column('content', sa.String(), nullable=False),

    )

def downgrade() -> None:
    op.drop_column(
        'posts',
        'content',
    )

alembic upgrade cfbd170bf84f
alembic downgrade 7506d4c94b6c
===============================================

in 28a823bcbe44_create_user_table.py

def upgrade() -> None:
    op.create_table(
        'users',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('email', sa.String(), nullable=False
        sa.Column('password', sa.String(), nullable=Fa
        sa.Column('created_at', 
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text('now()'),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('email'),
    )
    

def downgrade() -> None:
    op.drop_table('users')

alembic upgrade 28a823bcbe44
===============================================
# alembic revision -m "add foreign-key to posts table"

Generating e:\CS54\Python_FastAPI_All\Python_FastAPI\alembic\versions\142648192936_add_foreign_key_to_posts_table.py

def upgrade() -> None:
    op.add_column(
        'posts',
        sa.Column(
            'owner_id', 
            sa.Integer(),
            nullable=False,
        )
    )
    op.create_foreign_key(
        'posts_users_fk',
        source_table='posts',
        referent_table="users",
        local_cols=['owner_id'], remote_cols=['id'],
        ondelete="CASCADE",
    )


def downgrade() -> None:
    op.drop_constraint('posts_users_fk', table_name='posts')
    op.drop_column('posts', 'owner_id')

alembic upgrade head
================================================


def upgrade() -> None:
   op.add_column(
    'posts',
    sa.Column(
        'published',
        sa.Boolean(),
        nullable=False,
        server_default="TRUE",
    )
   )
   op.add_column(
    'posts',
    sa.Column(
        'created_at',
        sa.TIMESTAMP(timezone=True),
        nullable=False,
        server_default=sa.text('now()')
    )
   )

def downgrade() -> None:
    op.drop_column('posts', 'published')
    op.drop_column('posts', 'created_at')

================================================
# autogenerate the difference between alembic and sqlalchemy

alembic revision --autogenerate -m "autogenerate the difference"

================================================
CORS
in main.py
from fastapi.middleware.cors import CORSMiddleware

origins = ["*"]

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)
================================================
================================================
git and github
================================================
pip freeze > requirements.txt
pip install -r requirements.txt

go to github to setup new repo[fastapi-19hrs-20220816]

VSC terminal: 
git init
git add --all
git commit -m "initial commit"
git config --global user.email XXXXXXXX@XXXXXXXX
git branch -M main
git remote add origin git@github.com:ericarthuang/fastapi-19hrs.git
git push -u origin main
================================================
Heroku 
================================================
# in venv terminal
heroku login
heroku create fastapi-19hrs
git remote
git push heroku main
================================================











